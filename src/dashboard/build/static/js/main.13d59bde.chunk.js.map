{"version":3,"sources":["Header.js","Indicators.js","Chart.js","Choropleth.js","Table.js","App.js","serviceWorker.js","index.js"],"names":["Header","className","href","target","Indicators","totalCases","totalDeaths","deathRate","newCases","newCaseRate","casesPer100k","props","data","layout","yaxis","type","colorway","config","responsive","displayModeBar","title","geo","showframe","showcoastlines","showland","landcolor","projection","React","useMemo","columns","useTable","useSortBy","getTableProps","getTableBodyProps","headerGroups","rows","prepareRow","map","headerGroup","getHeaderGroupProps","headers","column","getHeaderProps","getSortByToggleProps","render","isSorted","isSortedDesc","row","getRowProps","cells","cell","getCellProps","App","state","country","worldwideData","countryData","referenceData","isLoading","urlObject","URL","window","location","searchParams","get","this","setState","datapackageUrl","base","newState","fetch","json","datapackage","Promise","all","resources","resource","a","name","path","response","parse","text","header","length","Date","pop","date","latest","latestDateObj","prevDateObj","setDate","getDate","toISOString","slice","forEach","push","Confirmed","Deaths","countriesData","getCountriesDataForDate","selectedCountryData","find","item","Country","toLowerCase","newCasesRate","toFixed","latestCountryData","prevCountryData","countryPopulation","Population","trace1","x","y","mode","trace2","trace3","previousRow","parseInt","JSON","stringify","trace","orientation","locations","z","autocolorscale","zmin","zmax","colorscale","colorbar","thickness","marker","line","color","width","referenceItem","iso3","tableData","tableColumns","previousData","index","Object","keys","accessor","options","value","label","latestData","set","history","pushState","countriesToCompare","newList","getTotalCasesAndDeaths","getNewCasesAndRate","getCasesPer100k","chartData","getChartData","mapData","getMapData","getTableData","getCountryOptions","defaultValue","onChange","onSelectChanged","bind","numeral","format","Chart","Choropleth","Table","Component","Boolean","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.13d59bde.chunk.js","sourcesContent":["import React from 'react';\n\n\nconst Header = () => (\n  <nav className=\"flex items-center justify-between flex-wrap bg-white py-6 px-6 md:px-16 shadow-sm\">\n    <div className=\"flex items-center flex-shrink-0 text-gray-600 mr-6\">\n      <a href=\"/\">\n        <span className=\"text-xl tracking-tight\">COVID-19 DASHBOARD</span>\n      </a>\n    </div>\n    <div className=\"w-full block flex-grow lg:flex lg:items-center lg:w-auto\">\n      <div className=\"text-sm lg:flex-grow\">\n\n      </div>\n\n      <div>\n        <a href=\"https://datahub.io/core/covid-19\" target=\"_blank\" className=\"block mt-4 lg:ml-6 lg:inline-block lg:mt-0 text-sm text-gray-700 hover:text-black\">\n          RAW DATA\n        </a>\n        <a href=\"https://www.datopian.com/about/\" target=\"_blank\" className=\"block mt-4 lg:ml-6 lg:inline-block lg:mt-0 text-sm text-gray-700 hover:text-black\">\n          TEAM\n        </a>\n        <a href=\"https://www.datopian.com/contact/\" target=\"_blank\" className=\"block mt-4 lg:ml-6 lg:inline-block lg:mt-0 text-sm text-gray-700 hover:text-black\">\n          CONTACT\n        </a>\n      </div>\n    </div>\n  </nav>\n)\n\n\nexport default Header;\n","import React from 'react';\n\n\nconst Indicators = ({totalCases, totalDeaths, deathRate, newCases, newCaseRate, casesPer100k}) => (\n  <div className=\"grid sm:grid-cols-1 lg:grid-cols-6 gap-6 mt-4 mb-4 font-bold text-2xl\">\n    <div className=\"border text-center py-12\">\n      {totalCases}\n      <div className=\"text-xs text-gray-600 font-light\">Cases</div>\n    </div>\n    <div className=\"border text-center py-12\">\n      {totalDeaths}\n      <div className=\"text-xs text-gray-600 font-light\">Deaths</div>\n    </div>\n    <div className=\"border text-center py-12\">\n      {deathRate}%\n      <div className=\"text-xs text-gray-600 font-light\">Death rate</div>\n    </div>\n    <div className=\"border text-center py-12\">\n      {newCases}\n      <div className=\"text-xs text-gray-600 font-light\">New cases yesterday</div>\n    </div>\n    <div className=\"border text-center py-12\">\n      {newCaseRate}%\n      <div className=\"text-xs text-gray-600 font-light\">New cases rate</div>\n    </div>\n    <div className=\"border text-center py-12\">\n      {casesPer100k}\n      <div className=\"text-xs text-gray-600 font-light\">Cases per 100k</div>\n    </div>\n  </div>\n\n)\n\n\nexport default Indicators;\n","import React from 'react';\nimport Plot from 'react-plotly.js';\n\n\nexport default function (props) {\n  return (\n    <Plot\n      className=\"w-full h-graph\"\n      data={props.data}\n      layout={ {yaxis: {type: 'log'}, colorway: ['black', 'gray', 'orange']} }\n      config={ {responsive: true, displayModeBar: false} }\n    />\n  );\n}\n","import React from 'react';\nimport Plot from 'react-plotly.js';\n\n\nexport default function (props) {\n  return (\n    <Plot\n      className=\"w-full h-screen md:h-map\"\n      data={props.data}\n      layout={ {\n        title: 'Cumulative confirmed cases',\n        geo:{\n          showframe: false,\n          showcoastlines: false,\n          showland: true,\n          landcolor: 'rgb(217, 217, 217)',\n          projection:{\n            type: 'robinson'\n          }\n      }} }\n      config={ {responsive: true, displayModeBar: false} }\n    />\n  );\n}\n","import React from 'react';\nimport { useTable, useSortBy } from 'react-table';\n\n\nexport default function (props) {\n  const data = React.useMemo(\n    () => props.data,\n    [],\n  )\n  const columns = React.useMemo(\n    () => props.columns,\n    [],\n  )\n  const {\n    getTableProps,\n    getTableBodyProps,\n    headerGroups,\n    rows,\n    prepareRow,\n  } = useTable({ columns, data }, useSortBy)\n  return (\n    <table {...getTableProps()} className=\"table-auto block h-screen-0.8 overflow-y-scroll\">\n      <thead>\n        {headerGroups.map(headerGroup => (\n          <tr {...headerGroup.getHeaderGroupProps()}>\n            {headerGroup.headers.map(column => (\n              <th\n                {...column.getHeaderProps(column.getSortByToggleProps())}\n                className=\"border px-4 py-2\"\n              >\n                {column.render('Header')}\n                <span>\n                  {column.isSorted ? (column.isSortedDesc ? ' 🔽' : ' 🔼') : ' ↕️'}\n                </span>\n              </th>\n            ))}\n          </tr>\n        ))}\n      </thead>\n      <tbody {...getTableBodyProps()}>\n        {rows.map(row => {\n          prepareRow(row)\n          return (\n            <tr {...row.getRowProps()}>\n              {row.cells.map(cell => {\n                return (\n                  <td className=\"border px-4 py-2\"\n                    {...cell.getCellProps()}\n                  >\n                    {cell.render('Cell')}\n                  </td>\n                )\n              })}\n            </tr>\n          )\n        })}\n      </tbody>\n    </table>\n  )\n}\n","import React, { Component } from 'react';\nimport Select from 'react-select';\nimport { parse } from 'papaparse';\nimport numeral from 'numeral';\nimport Header from './Header';\nimport Indicators from './Indicators';\nimport Chart from './Chart';\nimport Choropleth from './Choropleth';\nimport Table from './Table';\nimport './App.css';\n\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      country: 'world',\n      worldwideData: [],\n      countryData: [],\n      referenceData: [],\n      isLoading: false\n    };\n  }\n\n\n  async componentDidMount() {\n    const urlObject = new URL(window.location.href);\n    const country = urlObject.searchParams.get('country') || 'world';\n\n    this.setState({ isLoading: true, country });\n\n    const base = 'https://raw.githubusercontent.com/datasets/covid-19/master/';\n    const datapackageUrl = base + 'datapackage.json';\n\n    const newState = {isLoading: false}\n\n    const datapackage = await (await fetch(datapackageUrl)).json()\n\n    await Promise.all(datapackage.resources.map(async resource => {\n      if (resource.name === 'countries-aggregated') {\n        const response = await fetch(base + resource.path)\n        newState.countryData = (parse(await response.text(), {header: true})).data;\n        if (!newState.countryData[newState.countryData.length - 1].Date) {\n          newState.countryData.pop()\n        }\n      } else if (resource.name === 'worldwide-aggregated') {\n        const response = await fetch(base + resource.path)\n        newState.worldwideData = (parse(await response.text(), {header: true})).data;\n        if (!newState.worldwideData[newState.worldwideData.length - 1].Date) {\n          newState.worldwideData.pop()\n        }\n      } else if (resource.name === 'reference') {\n        const response = await fetch(base + resource.path)\n        newState.referenceData = (parse(await response.text(), {header: true})).data;\n        if (!newState.referenceData[newState.referenceData.length - 1].Date) {\n          newState.referenceData.pop()\n        }\n      }\n    }))\n\n    this.setState(newState)\n  }\n\n\n  getCountriesDataForDate(date) {\n    const { countryData } = this.state;\n    if (countryData.length > 0) {\n      const response = [];\n\n      if (date === 'latest') {\n        date = countryData[countryData.length - 1].Date;\n      } else if (date === 'previous') {\n        const latest = countryData[countryData.length - 1].Date;\n        const latestDateObj = new Date(latest);\n        const prevDateObj = new Date(latestDateObj.setDate(latestDateObj.getDate()-1));\n        date = prevDateObj.toISOString().slice(0,10);\n      }\n\n      countryData.forEach(row => {\n        if (row.Date === date) {\n          response.push(row);\n        }\n      })\n      return response;\n    }\n  }\n\n\n  getTotalCasesAndDeaths() {\n    const { worldwideData, country } = this.state;\n    let totalCases, totalDeaths;\n    if (country === 'world' && worldwideData.length > 0) {\n      totalCases = worldwideData[worldwideData.length - 1].Confirmed;\n      totalDeaths = worldwideData[worldwideData.length - 1].Deaths;\n    } else {\n      const countriesData = this.getCountriesDataForDate('latest');\n      if (countriesData) {\n        const selectedCountryData = countriesData\n          .find(item => item.Country.toLowerCase() === country.toLowerCase());\n        totalCases = selectedCountryData.Confirmed;\n        totalDeaths = selectedCountryData.Deaths;\n      }\n    }\n\n    return { totalCases, totalDeaths };\n  }\n\n\n  getNewCasesAndRate() {\n    const { worldwideData, countryData, country } = this.state;\n    let newCases, newCasesRate;\n    if (country === 'world' && worldwideData.length > 0) {\n      newCases = worldwideData[worldwideData.length - 1].Confirmed - worldwideData[worldwideData.length - 2].Confirmed;\n      newCasesRate = (newCases / worldwideData[worldwideData.length - 2].Confirmed * 100).toFixed(2);\n    } else if (countryData.length > 0) {\n      const latestCountryData = this.getCountriesDataForDate('latest')\n        .find(item => item.Country.toLowerCase() === country.toLowerCase());\n      const prevCountryData = this.getCountriesDataForDate('previous')\n        .find(item => item.Country.toLowerCase() === country.toLowerCase());\n      newCases = latestCountryData.Confirmed - prevCountryData.Confirmed;\n      newCasesRate = (newCases / prevCountryData.Confirmed * 100).toFixed(2);\n    }\n    return { newCases, newCasesRate };\n  }\n\n\n  getCasesPer100k() {\n    const { worldwideData, referenceData, country } = this.state;\n    let casesPer100k;\n    const countriesData = this.getCountriesDataForDate('latest');\n    if (country.toLowerCase() === 'world') {\n      if (worldwideData.length > 0) {\n        const worldPopulation = 7594270356;\n        casesPer100k = (worldwideData[worldwideData.length - 1].Confirmed / worldPopulation * 100000).toFixed(0);\n      }\n    } else if (countriesData && referenceData.length > 0) {\n      const selectedCountryData = countriesData\n        .find(item => item.Country.toLowerCase() === country.toLowerCase());\n      const countryPopulation = referenceData\n        .find(item => item['Country_Region'].toLowerCase() === country.toLowerCase())\n        .Population;\n      casesPer100k = (selectedCountryData.Confirmed / countryPopulation * 100000).toFixed(0);\n    }\n\n    return casesPer100k;\n  }\n\n\n  getChartData() {\n    const { country, worldwideData, countryData } = this.state;\n    const trace1 = {x: [], y: [], type: 'scatter', name: 'Cumilative confirmed cases', mode: 'lines+markers'};\n    const trace2 = {x: [], y: [], type: 'bar', name: 'New cases per day'};\n    const trace3 = {x: [], y: [], type: 'bar', name: 'Deaths per day'};\n    let previousRow = {Confirmed: 0, Deaths: 0};\n    if (country === 'world') {\n      worldwideData.forEach(row => {\n        trace1.x.push(row.Date);\n        trace1.y.push(parseInt(row.Confirmed));\n        trace2.x.push(row.Date);\n        trace2.y.push(row.Confirmed - previousRow.Confirmed);\n        trace3.x.push(row.Date);\n        trace3.y.push(row.Deaths - previousRow.Deaths)\n        previousRow = JSON.parse(JSON.stringify(row));\n      })\n    } else {\n      countryData.forEach(row => {\n        if (row.Country.toLowerCase() === country.toLowerCase()) {\n          trace1.x.push(row.Date);\n          trace1.y.push(parseInt(row.Confirmed));\n          trace2.x.push(row.Date);\n          trace2.y.push(row.Confirmed - previousRow.Confirmed);\n          trace3.x.push(row.Date);\n          trace3.y.push(row.Deaths - previousRow.Deaths)\n          previousRow = JSON.parse(JSON.stringify(row));\n        }\n      })\n    }\n    return [trace1, trace2, trace3];\n  }\n\n\n  getChartDataForComparison() {\n    const { referenceData } = this.state;\n    const trace = {x: [], y: [], type: 'bar', orientation: 'h'};\n    const countriesData = this.getCountriesDataForDate('latest');\n    if (countriesData && referenceData.length > 0) {\n      countriesData.forEach(row => {\n        trace.y.push(row.Country);\n        const countryPopulation = referenceData\n          .find(item => item['Country_Region'].toLowerCase() === row.Country.toLowerCase())\n          .Population;\n        const casesPer100k = (row.Confirmed / countryPopulation * 100000).toFixed(2);\n        trace.x.push(casesPer100k);\n      })\n    }\n    return [trace];\n  }\n\n\n  getMapData() {\n    const { referenceData } = this.state;\n    const countriesData = this.getCountriesDataForDate('latest');\n\n    const data = [{\n      type: 'choropleth',\n      locations: [], // ISO3 codes\n      z: [], // Values\n      text: [], // Country names\n      autocolorscale: false,\n      zmin: 100,\n      zmax: 1000000,\n      colorscale: [\n        [0, 'rgb(255,246,229)'], [0.2, 'rgb(255,165,1)'],\n        [0.4, 'rgb(229,148,0)'], [0.6, 'rgb(178,115,0)'],\n        [0.8, 'rgb(127,82,0)'], [1, 'rgb(51,33,0)']\n      ],\n      colorbar: {\n        thickness: 5\n      },\n      marker: {\n        line:{\n          color: 'rgb(255,255,255)',\n          width: 1\n        }\n      }\n    }];\n\n    if (countriesData && referenceData.length > 0) {\n      countriesData.forEach(row => {\n        data[0].z.push(row.Confirmed);\n        data[0].text.push(row.Country);\n        const referenceItem = referenceData\n          .find(item => item['Country_Region'].toLowerCase() === row.Country.toLowerCase());\n        data[0].locations.push(referenceItem.iso3);\n      })\n    }\n\n    return data;\n  }\n\n\n  getTableData() {\n    const { referenceData } = this.state;\n    let tableData = [];\n    let tableColumns = [];\n\n    const countriesData = this.getCountriesDataForDate('latest');\n    const previousData = this.getCountriesDataForDate('previous');\n    if (countriesData && referenceData.length > 0) {\n      tableData = countriesData;\n      tableData.map((row, index) => {\n        row['Death rate'] = (row['Deaths'] / row['Confirmed'] * 100).toFixed(2) + '%';\n        row['New cases'] = row['Confirmed'] - previousData[index]['Confirmed'];\n        row['New cases rate'] = (row['New cases'] / previousData[index]['Confirmed'] * 100).toFixed(2) + '%';\n        const countryPopulation = referenceData\n          .find(item => item['Country_Region'].toLowerCase() === row['Country'].toLowerCase())\n          .Population;\n        row['Cases per 100k'] = (row['Confirmed'] / countryPopulation * 100000).toFixed(0);\n        return row;\n      });\n\n      Object.keys(tableData[0]).forEach(item => {\n        tableColumns.push({\n          Header: item,\n          accessor: item\n        });\n      });\n    }\n\n    return { tableData, tableColumns };\n  }\n\n\n  getCountryOptions() {\n    const options = [{value: 'world', label: 'World'}];\n    const latestData = this.getCountriesDataForDate('latest');\n    if (latestData) {\n      latestData.forEach(item => options.push({value: item.Country, label: item.Country}));\n    }\n    return options;\n  }\n\n\n  onSelectChanged(data) {\n    const urlObject = new URL(window.location.href);\n    urlObject.searchParams.set('country', data.value);\n    window.history.pushState({path:urlObject.href}, '', urlObject.href);\n    this.setState({country: data.value});\n  }\n\n\n  onCompareSelectChanged(data) {\n    const { countriesToCompare } = this.state;\n    const newList = JSON.parse(JSON.stringify(countriesToCompare));\n    newList.push(data.value);\n    this.setState({countriesToCompare: newList})\n  }\n\n\n  render() {\n    const { country, isLoading } = this.state;\n\n    const { totalCases, totalDeaths } = this.getTotalCasesAndDeaths();\n    const deathRate = (totalDeaths / totalCases * 100).toFixed(2);\n    const { newCases, newCasesRate } = this.getNewCasesAndRate();\n    const casesPer100k = this.getCasesPer100k();\n\n    const chartData = this.getChartData();\n\n    const mapData = this.getMapData();\n\n    const { tableData, tableColumns } = this.getTableData();\n\n    const options = this.getCountryOptions();\n\n    if (isLoading) {\n      return (\n        <div className=\"flex h-screen\">\n          <p className=\"m-auto\">Loading ...</p>\n        </div>\n      );\n    }\n    return (\n      <div>\n        <Header />\n        <div className=\"px-6 md:px-16\">\n          <Select\n            className=\"mt-6 w-full md:w-1/3 capitalize\"\n            options={options}\n            defaultValue={{value: country, label: country}}\n            isLoading={isLoading}\n            onChange={this.onSelectChanged.bind(this)}\n          />\n          <Indicators\n            totalCases={numeral(totalCases).format('0,0')}\n            totalDeaths={numeral(totalDeaths).format('0,0')}\n            deathRate={deathRate}\n            newCases={numeral(newCases).format('0,0')}\n            newCaseRate={newCasesRate}\n            casesPer100k={casesPer100k}\n          />\n          <div className=\"mt-4 mb-4 w-full\">\n            <Chart data={chartData} />\n          </div>\n          <div className=\"mt-4 mb-4 w-full\">\n            <Choropleth data={mapData} />\n          </div>\n          <div className=\"mt-4 mb-4 w-full border-2\">\n            <Table data={tableData} columns={tableColumns} />\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}